// Border radius
// --------------------------------------------------

@mixin border-radius( $radius: 2px ) {
	-webkit-border-radius: $radius;
		 -moz-border-radius: $radius;
					border-radius: $radius;   
}

// Clearfix
// --------------------------------------------------

@mixin clearfix {
	*zoom: 1;
	&:before,
	&:after {
		display: table;
		content: "";
		line-height: 0;
	}
	&:after {
		clear: both;
	}
}

// Box sizing
// --------------------------------------------------

@mixin box-sizing($boxmodel: border-box) {
	-webkit-box-sizing: $boxmodel;
		 -moz-box-sizing: $boxmodel;
					box-sizing: $boxmodel;
}

// Animation
@mixin animation ($name, $duration: 300ms, $delay: 0, $ease: ease) {
	-webkit-animation: $name $duration $delay $ease;
	-moz-animation:    $name $duration $delay $ease;
	-ms-animation:     $name $duration $delay $ease;
	-o-animation:     $name $duration $delay $ease;
	animation:     $name $duration $delay $ease;
}

// Sked Thumbnail directive
@mixin sked-thumbnail-size( $size: 40px, $rounded: false ) {
	@if $rounded == true {
		@include border-radius( $size / 2 );
		img{
			@include border-radius( $size / 2 );
		}
	}
	width: $size;
	height: $size;
	i{
		font-size:floor( ($size / 3) * 2 );
		color:#fff;
		line-height:$size;
	}
}

// Circle
@mixin circle( $size: 10px ) {
	display: inline-block;
	min-width: $size;
	height: $size;
	text-align: center;
	@include border-radius(100%);
}

// Form control focus state
//
// Generate a customized focus state and for any input with the specified color,
// which defaults to the `$input-border-focus` variable.
//
// We highly encourage you to not customize the default value, but instead use
// this to tweak colors on an as-needed basis. This aesthetic change is based on
// WebKit's default styles, but applicable to a wider range of browsers. Its
// usability and accessibility should be taken into account with any change.
//
// Example usage: change the default blue border and shadow to white for better
// contrast against a dark gray background.
@mixin form-control-focus($color: $input-border-focus) {
  $color-rgba: rgba(red($color), green($color), blue($color), .6);
  &:focus {
    border-color: $color;
    outline: 0;
    @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px $color-rgba);
  }
}

// WebKit-style focus

@mixin tab-focus() {
  // Default
  outline: thin dotted;
  // WebKit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

// Full page
@mixin fullscreen {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    width: 100%;
}

// Scroll vertical
@mixin scroll-vertical(){
    overflow-y:auto;
    overflow-x:hidden;
    -webkit-overflow-scrolling: touch;
}

// Box Shadow
@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow;
          box-shadow: $shadow;
}

// Button Mixins
// --------------------------------------------------


@mixin button-style(
    $bg-color, 
    $border-color, 
    $active-bg-color, 
    $active-border-color, 
    $color, 
    $active-color,
    $hover-background
) {
    border-color: $border-color;
    background-color: $bg-color;
    color: $color;
    $background-hover: lighten($active-bg-color, 15%);
    &:hover, 
    &:focus {
        background-color: $hover-background;
        color: $color;
    }
    &:active,
    &.active {
        border-color: $active-border-color;
        background-color: $active-bg-color;
        color: $active-color;
    }
}

@mixin button-color-style($background, $color) {
    @include button-style(
        $background, 
        darken($background, 13.7%), // Default bg button is white, t13.7& will make the border #dcdcdc 
        darken($background, 20%), 
        darken($background, 20%), 
        $color, 
        $color,
        darken($background, 10%)
    );
}

@mixin button-clear($color, $font-size:"") {
    &.button-clear {
        border-color: transparent;
        background: none;
        box-shadow: none;
        color: $color;

        @if $font-size != "" {
            font-size: $font-size;
        }
    }
    &.button-icon {
        border-color: transparent;
        background: none;
    }
}

@mixin button-outline($color, $text-color:"") {
    &.button-outline {
        border-color: $color;
        background: transparent;
        @if $text-color == "" {
            $text-color: $color;
        }
        color: $text-color;
        &.active,
        &.activated {
            background-color: $color;
            box-shadow: none;
            color: #fff;
        }
    }
}

// Tab Mixins
// --------------------------------------------------

@mixin tab-style($bg-color, $border-color, $color) {
    border-color: $border-color;
    background-color: $bg-color;
    background-image: linear-gradient(0deg, $border-color, $border-color 50%, transparent 50%);
    color: $color;
}

@mixin tab-badge-style($bg-color, $color) {
    .tab-item .badge {
        background-color: $bg-color;
        color: $color;
    }
}

// Item Mixins
// --------------------------------------------------

@mixin item-style($bg-color, $border-color, $color) {
    border-color: $border-color;
    background-color: $bg-color;
    color: $color;
}


// Badge Mixins
// --------------------------------------------------

@mixin badge-style($bg-color, $color) {
    background-color: $bg-color;
    color: $color;
}

// Appearance
// --------------------------------------------------

@mixin appearance($val) {
    -webkit-appearance: $val;
         -moz-appearance: $val;
                    appearance: $val;
}

// Use the class "ns" on any element to disable text selection highlighting
@mixin unselectable() {
    @include transform( none );
}

// Text Mixins
// --------------------------------------------------

@mixin text-size-adjust($value: none) {
  -webkit-text-size-adjust: $value;
     -moz-text-size-adjust: $value;
          text-size-adjust: $value;
}
@mixin tap-highlight-transparent() {
  -webkit-tap-highlight-color: rgba(0,0,0,0);
  -webkit-tap-highlight-color: transparent; // For some Androids
}
@mixin touch-callout($value: none) {
  -webkit-touch-callout: $value;
}

// Font Mixins
// --------------------------------------------------

@mixin font-family-serif() {
  font-family: $serif-font-family;
}
@mixin font-family-sans-serif() {
  font-family: $sans-font-family;
}
@mixin font-family-monospace() {
  font-family: $mono-font-family;
}
@mixin font-shorthand($size: $base-font-size, $weight: normal, $line-height: $base-line-height) {
  font-weight: $weight;
  font-size: $size;
  line-height: $line-height;
}
@mixin font-serif($size: $base-font-size, $weight: normal, $line-height: $base-line-height) {
  @include font-family-serif();
  @include font-shorthand($size, $weight, $line-height);
}
@mixin font-sans-serif($size: $base-font-size, $weight: normal, $line-height: $base-line-height) {
  @include font-family-sans-serif();
  @include font-shorthand($size, $weight, $line-height);
}
@mixin font-monospace($size: $base-font-size, $weight: normal, $line-height: $base-line-height) {
  @include font-family-monospace();
  @include font-shorthand($size, $weight, $line-height);
}
@mixin font-smoothing($font-smoothing) {
  -webkit-font-smoothing: $font-smoothing;
          font-smoothing: $font-smoothing;
}

// User select
// --------------------------------------------------

@mixin user-select($select) {
  -webkit-user-select: $select;
     -moz-user-select: $select;
      -ms-user-select: $select;
          user-select: $select;
}

// Drag
@mixin user-drag($value: none) {
  -webkit-user-drag: $value;
  -moz-user-drag: $value;
  -ms-user-drag: $value;
  user-drag: $value;
}

// Transition Mixins
// --------------------------------------------------

@mixin transition($transition...) {
  -webkit-transition: $transition;
          transition: $transition;
}
@mixin transition-delay($transition-delay) {
  -webkit-transition-delay: $transition-delay;
          transition-delay: $transition-delay;
}
@mixin transition-duration($transition-duration) {
  -webkit-transition-duration: $transition-duration;
          transition-duration: $transition-duration;
}
@mixin transition-timing-function($transition-timing) {
   -webkit-transition-timing-function: $transition-timing;
           transition-timing-function: $transition-timing;
 }
 @mixin transition-property($property) {
  -webkit-transition-property: $property;
          transition-property: $property;
}
@mixin transition-transform($properties...) {
  // special case cuz of transform vendor prefixes
  -webkit-transition: -webkit-transform $properties;
          transition: transform $properties;
}


// Animation Mixins
// --------------------------------------------------

@mixin animation-duration($duration) {
 -webkit-animation-duration: $duration;
         animation-duration: $duration;
}
@mixin animation-direction($direction) {
 -webkit-animation-direction: $direction;
         animation-direction: $direction;
}
@mixin animation-timing-function($animation-timing) {
 -webkit-animation-timing-function: $animation-timing;
         animation-timing-function: $animation-timing;
}
@mixin animation-fill-mode($fill-mode) {
 -webkit-animation-fill-mode: $fill-mode;
         animation-fill-mode: $fill-mode;
}
@mixin animation-name($name...) {
 -webkit-animation-name: $name;
         animation-name: $name;
}
@mixin animation-iteration-count($count) {
 -webkit-animation-iteration-count: $count;
         animation-iteration-count: $count;
}

// Transformation Mixins
// --------------------------------------------------

@mixin rotate($degrees) {
    @include transform( rotate($degrees) );
}
@mixin scale($ratio) {
    @include transform( scale($ratio) );
}
@mixin translate($x, $y) {
    @include transform( translate($x, $y) );
}
@mixin skew($x, $y) {
    @include transform( skew($x, $y) );
    -webkit-backface-visibility: hidden;
}
@mixin translate3d($x, $y, $z) {
    @include transform( translate3d($x, $y, $z) );
}
@mixin translateZ($z) {
    @include transform( translateZ($z) );
}
@mixin transform($val) {
    -webkit-transform: $val;
                    transform: $val;
}

@mixin transform-origin($left, $top) {
    -webkit-transform-origin: $left $top;
                    transform-origin: $left $top;
}

// Flexbox Mixins
// --------------------------------------------------
// http://philipwalton.github.io/solved-by-flexbox/
// https://github.com/philipwalton/solved-by-flexbox

@mixin display-flex {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-box;
    display: -moz-flex;
    display: -ms-flexbox;
    display: flex;
}

@mixin display-inline-flex {
    display: -webkit-inline-box;
    display: -webkit-inline-flex;
    display: -moz-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
}

@mixin flex-direction($value: row) {
    @if $value == row-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: horizontal;
    } @else if $value == column {
        -webkit-box-direction: normal;
        -webkit-box-orient: vertical;
    } @else if $value == column-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: vertical;
    } @else {
        -webkit-box-direction: normal;
        -webkit-box-orient: horizontal;
    }
    -webkit-flex-direction: $value;
    -moz-flex-direction: $value;
    -ms-flex-direction: $value;
    flex-direction: $value;
}

@mixin flex-wrap($value: nowrap) {
    // No Webkit Box fallback.
    -webkit-flex-wrap: $value;
    -moz-flex-wrap: $value;
    @if $value == nowrap {
            -ms-flex-wrap: none;
    } @else {
            -ms-flex-wrap: $value;
    }
    flex-wrap: $value;
}

@mixin flex($fg: 1, $fs: null, $fb: null) {
    -webkit-box-flex: $fg;
    -webkit-flex: $fg $fs $fb;
    -moz-box-flex: $fg;
    -moz-flex: $fg $fs $fb;
    -ms-flex: $fg $fs $fb;
    flex: $fg $fs $fb;
}

@mixin flex-flow($values: (row nowrap)) {
    // No Webkit Box fallback.
    -webkit-flex-flow: $values;
    -moz-flex-flow: $values;
    -ms-flex-flow: $values;
    flex-flow: $values;
}

@mixin align-items($value: stretch) {
    @if $value == flex-start {
        -webkit-box-align: start;
        -ms-flex-align: start;
    } @else if $value == flex-end {
        -webkit-box-align: end;
        -ms-flex-align: end;
    } @else {
        -webkit-box-align: $value;
        -ms-flex-align: $value;
    }
    -webkit-align-items: $value;
    -moz-align-items: $value;
    align-items: $value;
}

@mixin justify-content($value: stretch) {
    @if $value == flex-start {
        -webkit-box-pack: start;
        -ms-flex-pack: start;
    } @else if $value == flex-end {
        -webkit-box-pack: end;
        -ms-flex-pack: end;
    } @else if $value == space-between {
        -webkit-box-pack: justify;
        -ms-flex-pack: justify;
    } @else {
        -webkit-box-pack: $value;
        -ms-flex-pack: $value;
    }
    -webkit-justify-content: $value;
    -moz-justify-content: $value;
    justify-content: $value;
}
